I"ñ!<p>Open Peer Power can run as a daemon within init.d with the script below.</p>
<h2>1. Copy script</h2>
<p>Copy either the daemon script or the Python environment script at the end of this page to <code>/etc/init.d/hass-daemon</code> depending on your installation.</p>
<p>After that, set the script to be executable:</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sudo chmod +x /etc/init.d/hass-daemon</code></pre></figure>
<h2>2. Select a user</h2>
<p>Create or pick a user that the Open Peer Power daemon will run under. Update script to set <code>RUN_AS</code> to the username that should be used to execute Open Peer Power.</p>
<h2>3. Change <code>hass</code> executable and other variables if required</h2>
<p>Some installation environments may require a change in the Open Peer Power executable <code>hass</code>. Update script to set <code>HASS_BIN</code> to the appropriate <code>hass</code> executable path. Please also check the other variables for the appropriate value. In general the defaults should work</p>
<h2>4. Install this service</h2>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sudo service hass-daemon install</code></pre></figure>
<h2>5. Create logrotate rule</h2>
<p>This logrotate script at <code>/etc/logrotate.d/openpeerpower</code> will create an outage of a few seconds every week at night. If you do not want this add <code>--log-rotate-days 7</code> to the <code>FLAGS</code> variable in the init script.</p>
<p>File <code>/var/log/openpeerpower/open-peer-power.log</code>:</p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">{
        rotate 7
        daily
        missingok
        notifempty
        delaycompress
        compress
        postrotate
                invoke-rc.d hass-daemon restart &gt; /dev/null
        endscript
}</code></pre></figure>
<h3>6. Restart Machine</h3>
<p>Thatâ€™s it. Restart your machine and Open Peer Power should start automatically.</p>
<p>If Open Peer Power does not start, check the log file output for errors at <code>/var/log/openpeerpower/open-peer-power.log</code></p>
<h3>Extra: Running commands before Open Peer Power executes</h3>
<p>If any commands need to run before executing Open Peer Power (like loading a virtual environment), put them in PRE_EXEC. This command must end with a semicolon.</p>
<h3>Daemon script</h3>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">#!/bin/sh
### BEGIN INIT INFO
# Provides:          hass
# Required-Start:    $local_fs $network $named $time $syslog
# Required-Stop:     $local_fs $network $named $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       Home\ Assistant
### END INIT INFO
<h1>/etc/init.d Service Script for Open Peer Power</h1>
<h1>Created with: <a href="https://gist.github.com/naholyr/4275302#file-new-service-sh">https://gist.github.com/naholyr/4275302#file-new-service-sh</a></h1>
<p>PRE_EXEC=&quot;&quot;</p>
<h1>Typically /usr/bin/hass</h1>
<p>HASS_BIN=&quot;hass&quot;
RUN_AS=&quot;openpeerpower&quot;
PID_DIR=&quot;/var/run/hass&quot;
PID_FILE=&quot;$PID_DIR/hass.pid&quot;
CONFIG_DIR=&quot;/var/opt/openpeerpower&quot;
LOG_DIR=&quot;/var/log/openpeerpower&quot;
LOG_FILE=&quot;$LOG_DIR/open-peer-power.log&quot;
FLAGS=&quot;-v â€“config $CONFIG_DIR â€“pid-file $PID_FILE â€“log-file $LOG_FILE â€“daemon&quot;</p>
<p>start() {
create_piddir
if [ -f $PID_FILE ] &amp;&amp; kill -0 $(cat $PID_FILE) 2&gt; /dev/null; then
echo 'Service already running' &gt;&amp;2
return 1
fi
echo -n 'Starting serviceâ€¦ ' &gt;&amp;2
local CMD=&quot;$PRE_EXEC $HASS_BIN $FLAGS&quot;
su -s /bin/bash -c &quot;$CMD&quot; $RUN_AS
if [ $? -ne 0 ]; then
echo &quot;Failed&quot; &gt;&amp;2
else
echo 'Done' &gt;&amp;2
fi
}</p>
<p>stop() {
if [ ! -f &quot;$PID_FILE&quot; ] || ! kill -0 $(cat &quot;$PID_FILE&quot;) 2&gt; /dev/null; then
echo 'Service not running' &gt;&amp;2
return 1
fi
echo -n 'Stopping serviceâ€¦ ' &gt;&amp;2
kill $(cat &quot;$PID_FILE&quot;)
while ps -p $(cat &quot;$PID_FILE&quot;) &gt; /dev/null 2&gt;&amp;1; do sleep 1;done;
rm -f $PID_FILE
echo 'Done' &gt;&amp;2
}</p>
<p>install() {
echo &quot;Installing Open Peer Power Daemon (hass-daemon)&quot;
update-rc.d hass-daemon defaults
create_piddir
mkdir -p $CONFIG_DIR
chown $RUN_AS $CONFIG_DIR
mkdir -p $LOG_DIR
chown $RUN_AS $LOG_DIR
}</p>
<p>uninstall() {
echo &quot;Are you really sure you want to uninstall this service? The INIT script will&quot;
echo -n &quot;also be deleted! That cannot be undone. [yes|No] &quot;
local SURE
read SURE
if [ &quot;$SURE&quot; = &quot;yes&quot; ]; then
stop
remove_piddir
echo &quot;Notice: The config directory has not been removed&quot;
echo $CONFIG_DIR
echo &quot;Notice: The log directory has not been removed&quot;
echo $LOG_DIR
update-rc.d -f hass-daemon remove
rm -fv &quot;$0&quot;
echo &quot; Open Peer Power Daemon has been removed. Open Peer Power is still installed.&quot;
fi
}</p>
<p>create_piddir() {
if [ ! -d &quot;$PID_DIR&quot; ]; then
mkdir -p $PID_DIR
chown $RUN_AS &quot;$PID_DIR&quot;
fi
}</p>
<p>remove_piddir() {
if [ -d &quot;$PID_DIR&quot; ]; then
if [ -e &quot;$PID_FILE&quot; ]; then
rm -fv &quot;$PID_FILE&quot;
fi
rmdir -v &quot;$PID_DIR&quot;
fi
}</p>
<p>case &quot;$1&quot; in
start)
start
;;
stop)
stop
;;
install)
install
;;
uninstall)
uninstall
;;
restart)
stop
start
;;
*)
echo &quot;Usage: $0 {start|stop|restart|install|uninstall}&quot;
esac</code></pre></figure></p>
<h3>Python virtual environment</h3>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">#!/bin/sh
### BEGIN INIT INFO
# Provides:          hass
# Required-Start:    $local_fs $network $named $time $syslog
# Required-Stop:     $local_fs $network $named $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       Home\ Assistant
### END INIT INFO
<h1>/etc/init.d Service Script for Open Peer Power</h1>
<h1>Created with: <a href="https://gist.github.com/naholyr/4275302#file-new-service-sh">https://gist.github.com/naholyr/4275302#file-new-service-sh</a></h1>
<p>PRE_EXEC=&quot;cd /srv/openpeerpower; python3 -m venv .; source bin/activate;&quot;</p>
<h1>Typically /usr/bin/hass</h1>
<p>HASS_BIN=&quot;hass&quot;
RUN_AS=&quot;openpeerpower&quot;
PID_DIR=&quot;/var/run/hass&quot;
PID_FILE=&quot;$PID_DIR/hass.pid&quot;
CONFIG_DIR=&quot;/home/$RUN_AS/.openpeerpower&quot;
LOG_DIR=&quot;/var/log/openpeerpower&quot;
LOG_FILE=&quot;$LOG_DIR/open-peer-power.log&quot;
FLAGS=&quot;-v â€“config $CONFIG_DIR â€“pid-file $PID_FILE â€“log-file $LOG_FILE â€“daemon&quot;</p>
<p>start() {
create_piddir
if [ -f $PID_FILE ] &amp;&amp; kill -0 $(cat $PID_FILE) 2&gt; /dev/null; then
echo 'Service already running' &gt;&amp;2
return 1
fi
echo -n 'Starting serviceâ€¦ ' &gt;&amp;2
local CMD=&quot;$PRE_EXEC $HASS_BIN $FLAGS&quot;
su -s /bin/bash -c &quot;$CMD&quot; $RUN_AS
if [ $? -ne 0 ]; then
echo &quot;Failed&quot; &gt;&amp;2
else
echo 'Done' &gt;&amp;2
fi
}</p>
<p>stop() {
if [ ! -f &quot;$PID_FILE&quot; ] || ! kill -0 $(cat &quot;$PID_FILE&quot;) 2&gt; /dev/null; then
echo 'Service not running' &gt;&amp;2
return 1
fi
echo -n 'Stopping serviceâ€¦ ' &gt;&amp;2
kill $(cat &quot;$PID_FILE&quot;)
while ps -p $(cat &quot;$PID_FILE&quot;) &gt; /dev/null 2&gt;&amp;1; do sleep 1;done;
rm -f $PID_FILE
echo 'Done' &gt;&amp;2
}</p>
<p>install() {
echo &quot;Installing Open Peer Power Daemon (hass-daemon)&quot;
update-rc.d hass-daemon defaults
create_piddir
mkdir -p $CONFIG_DIR
chown $RUN_AS $CONFIG_DIR
mkdir -p $LOG_DIR
chown $RUN_AS $LOG_DIR
}</p>
<p>uninstall() {
echo &quot;Are you really sure you want to uninstall this service? The INIT script will&quot;
echo -n &quot;also be deleted! That cannot be undone. [yes|No] &quot;
local SURE
read SURE
if [ &quot;$SURE&quot; = &quot;yes&quot; ]; then
stop
remove_piddir
echo &quot;Notice: The config directory has not been removed&quot;
echo $CONFIG_DIR
echo &quot;Notice: The log directory has not been removed&quot;
echo $LOG_DIR
update-rc.d -f hass-daemon remove
rm -fv &quot;$0&quot;
echo &quot; Open Peer Power Daemon has been removed. Open Peer Power is still installed.&quot;
fi
}</p>
<p>create_piddir() {
if [ ! -d &quot;$PID_DIR&quot; ]; then
mkdir -p $PID_DIR
chown $RUN_AS &quot;$PID_DIR&quot;
fi
}</p>
<p>remove_piddir() {
if [ -d &quot;$PID_DIR&quot; ]; then
if [ -e &quot;$PID_FILE&quot; ]; then
rm -fv &quot;$PID_FILE&quot;
fi
rmdir -v &quot;$PID_DIR&quot;
fi
}</p>
<p>case &quot;$1&quot; in
start)
start
;;
stop)
stop
;;
install)
install
;;
uninstall)
uninstall
;;
restart)
stop
start
;;
*)
echo &quot;Usage: $0 {start|stop|restart|install|uninstall}&quot;
esac</code></pre></figure></p>
:ET