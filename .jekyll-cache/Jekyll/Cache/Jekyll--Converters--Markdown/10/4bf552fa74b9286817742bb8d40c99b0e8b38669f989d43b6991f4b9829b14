I"í<p>To run Python 3.x on <a href="https://www.centos.org/">CentOS</a> or RHEL (Red Hat Enterprise Linux), <a href="https://www.softwarecollections.org/en/scls/rhscl/rh-python36/">Software Collections</a> needs to be activated first.</p>
<h3>Using Software Collections</h3>
<p>First of all install the software collection repository as root and <a href="https://access.redhat.com/documentation/en-US/Red_Hat_Developer_Toolset/1/html-single/Software_Collections_Guide/">scl utils</a>. For example, on CentOS:</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sudo yum install centos-release-scl
sudo yum-config-manager --enable centos-sclo-rh-testing
sudo yum install -y scl-utils</code></pre></figure>
<p>Install some dependencies youâ€™ll need later.</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sudo yum install gcc gcc-c++ systemd-devel</code></pre></figure>
<p>Then install the Python 3.6 package. If you are using CentOS 7 then you may have to install the packages for Python 3.6 using RHEL Methods listed here: <a href="https://www.softwarecollections.org/en/scls/rhscl/rh-python36/">https://www.softwarecollections.org/en/scls/rhscl/rh-python36/</a>) for this to work as mentioned above.</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sudo yum install rh-python36</code></pre></figure>
<p>This is part of the slight change when trying to install Python 3.6 and running the command <code>python36 --version</code> which will after install give you the correct version, but wonâ€™t allow you to set the software collection using the <code>scl</code> command. This command downloads the RH collection of Python to allow you to run <code>scl</code> command to enable the environment in <code>bash</code> and then run the automate command using the template.</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">yum install rh-python36</code></pre></figure>
<h3>Start using software collections</h3>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">scl enable rh-python36 bash</code></pre></figure>
<p>Once installed, switch to your <code>openpeerpower</code> user (if youâ€™ve set one up), enable the software collection and check that it has set up the new version of Python:</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">$ python --version
Python 3.6.3</code></pre></figure>
<p>You will be in a command shell set up with Python 3.6 as your default version. The <code>virtualenv</code> and <code>pip</code> commands will be correct for this version, so you can now create a virtual environment and install Open Peer Power following the main <a href="/docs/installation/virtualenv/#step-4-set-up-the-virtualenv">instructions</a>.</p>
<p>You will need to enable the software collection each time you log on before you activate your virtual environment.</p>
<h3>Systemd with Software Collections</h3>
<p>To autostart Open Peer Power using systemd and a python36 (from SCL) virtual environment, follow the main <a href="/docs/autostart/systemd/">instructions</a> and adjust the template as follows:</p>
<p>Filename: <code>/etc/systemd/system/open-peer-power@openpeerpower.service</code></p>
<figure class="highlight"><pre><code class="language-txt" data-lang="txt">[Unit]
Description=Open Peer Power
After=network-online.target
<p>[Service]
Type=simple</p>
<h1>%i means the username is derrived from the filename.</h1>
<p>User=%i</p>
<h1>a python venv for hass exists in /opt/hass/venv</h1>
<p>ExecStart=/srv/openpeerpower/bin/hass</p>
<p>[Install]
WantedBy=multi-user.target</code></pre></figure></p>
<p>This works because the Python virtual environment was created using the SCL environment, thus there is no need to activate SCL.</p>
:ET