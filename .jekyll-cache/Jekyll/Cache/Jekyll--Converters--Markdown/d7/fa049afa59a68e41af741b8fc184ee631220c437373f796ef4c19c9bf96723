I"K<p>The <code>input_number</code> integration allows the user to define values that can be controlled via the frontend and can be used within conditions of automation. The frontend can display a slider, or a numeric input box. Changes to the slider or numeric input box generate state events. These state events can be utilized as <code>automation</code> triggers as well.</p>
<p>To enable this input number in your installation, add the following lines to your <code>configuration.yaml</code>:</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
input_number:
  slider1:
    name: Slider
    initial: 30
    min: -20
    max: 35
    step: 1
  box1:
    name: Numeric Input Box
    initial: 30
    min: -20
    max: 35
    step: 1
    mode: box</code></pre></figure>
<h3>Services</h3>
<p>This integration provides the following services to modify the state of the <code>input_number</code> and a service to reload the
configuration without restarting Open Peer Power itself.</p>
<table>
<thead>
<tr>
<th>Service</th>
<th>Data</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>decrement</code></td>
<td><code>entity_id(s)</code><br><code>area_id(s)</code></td>
<td>Decrement the value of specific <code>input_number</code> entities by <code>step</code></td>
</tr>
<tr>
<td><code>increment</code></td>
<td><code>entity_id(s)</code><br><code>area_id(s)</code></td>
<td>Increment the value of specific <code>input_number</code> entities by <code>step</code></td>
</tr>
<tr>
<td><code>reload</code></td>
<td></td>
<td>Reload <code>input_number</code> configuration</td>
</tr>
<tr>
<td><code>set_value</code></td>
<td><code>value</code><br><code>entity_id(s)</code><br><code>area_id(s)</code></td>
<td>Set the value of specific <code>input_number</code> entities</td>
</tr>
</tbody>
</table>
<h3>Restore State</h3>
<p>If you set a valid value for <code>initial</code> this integration will start with state set to that value. Otherwise, it will restore the state it had prior to Open Peer Power stopping.</p>
<h3>Scenes</h3>
<p>To set the value of an input_number in a <a href="/integrations/scene/">Scene</a>:</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
scene:
  - name: Example Scene
    entities:
      input_number.example_number: 13</code></pre></figure>
<h2>Automation Examples</h2>
<p>Here’s an example of <code>input_number</code> being used as a trigger in an automation.</p>
<p>{% highlight yaml %}</p>
<h1>Example configuration.yaml entry using ‘input_number’ as a trigger in an automation</h1>
<p>input_number:
bedroom_brightness:
name: Brightness
initial: 254
min: 0
max: 254
step: 1
automation:</p>
<ul>
<li>alias: Bedroom Light - Adjust Brightness
trigger:
platform: state
entity_id: input_number.bedroom_brightness
action:
<ul>
<li>service: light.turn_on
<h1>Note the use of ‘data_template:’ below rather than the normal ‘data:’ if you weren’t using an input variable</h1>
data_template:
entity_id: light.bedroom
brightness: “{{ trigger.to_state.state | int }}”
{% endhighlight %}</li>
</ul>
</li>
</ul>
<p>Another code example using <code>input_number</code>, this time being used in an action in an automation.</p>
<p>{% highlight yaml %}</p>
<h1>Example configuration.yaml entry using ‘input_number’ in an action in an automation</h1>
<p>input_select:
scene_bedroom:
name: Scene
options:
- Select
- Concentrate
- Energize
- Reading
- Relax
- ‘OFF’
initial: ‘Select’
input_number:
bedroom_brightness:
name: Brightness
initial: 254
min: 0
max: 254
step: 1
automation:</p>
<ul>
<li>alias: Bedroom Light - Custom
trigger:
platform: state
entity_id: input_select.scene_bedroom
to: CUSTOM
action:
<ul>
<li>service: light.turn_on
<h1>Again, note the use of ‘data_template:’ rather than the normal ‘data:’ if you weren’t using an input variable.</h1>
data_template:
entity_id: light.bedroom
brightness: “{{ states(‘input_number.bedroom_brightness’) | int }}”
{% endhighlight %}</li>
</ul>
</li>
</ul>
<p>Example of <code>input_number</code> being used in a bidirectional manner, both being set by and controlled by an MQTT action in an automation.</p>
<p>{% highlight yaml %}</p>
<h1>Example configuration.yaml entry using ‘input_number’ in an action in an automation</h1>
<p>input_number:
target_temp:
name: Target Heater Temperature Slider
min: 1
max: 30
step: 1
unit_of_measurement: step<br />
icon: mdi:target</p>
<h1>This automation script runs when a value is received via MQTT on retained topic: setTemperature</h1>
<h1>It sets the value slider on the GUI. This slides also had its own automation when the value is changed.</h1>
<p>automation:</p>
<ul>
<li>alias: Set temp slider
trigger:
platform: mqtt
topic: ‘setTemperature’
action:
service: input_number.set_value
data_template:
entity_id: input_number.target_temp
value: “{{ trigger.payload }}”</li>
</ul>
<h1>This second automation script runs when the target temperature slider is moved.</h1>
<h1>It publishes its value to the same MQTT topic it is also subscribed to.</h1>
<ul>
<li>alias: Temp slider moved
trigger:
platform: state
entity_id: input_number.target_temp
action:
service: mqtt.publish
data_template:
topic: ‘setTemperature’
retain: true
payload: “{{ states(‘input_number.target_temp’) | int }}”
{% endhighlight %}</li>
</ul>
<p>Here’s an example of <code>input_number</code> being used as a delay in an automation.</p>
<p>{% highlight yaml %}</p>
<h1>Example configuration.yaml entry using ‘input_number’ as a delay in an automation</h1>
<p>input_number:
minutes:
name: minutes
icon: mdi:clock-start
initial: 3
min: 0
max: 6
step: 1</p>
<p>seconds:
name: seconds
icon: mdi:clock-start
initial: 30
min: 0
max: 60
step: 10</p>
<p>automation:</p>
<ul>
<li>alias: turn something off after x time after turning it on
trigger:
platform: state
entity_id: switch.something
to: ‘on’
action:
<ul>
<li>delay: ’00:{{ states(‘input_number.minutes’) | int }}:{{ states(‘input_number.seconds’) | int }}’</li>
<li>service: switch.turn_off
entity_id: switch.something
{% endhighlight %}</li>
</ul>
</li>
</ul>
:ET