I"E<p>The <code>timer</code> integration aims to simplify automations based on (dynamic) durations.</p>
<p>When a timer finishes or gets canceled the corresponding events are fired. This allows you to differentiate if a timer has switched from <code>active</code> to <code>idle</code> because the given duration has elapsed or it has been canceled. To control timers in your automations you can use the services mentioned below. When calling the <code>start</code> service on a timer that is already running, it resets the duration it will need to finish and restart the timer without triggering a canceled or finished event. This, for example, makes it easy to create timed lights that get triggered by motion. Starting a timer triggers a started event unless the timer is paused, in that case, it triggers a restarted event.</p>
<div class='note warning'>
  With the current implementation timers don't persist over restarts. After a restart, they will be idle again, together with their initial configuration.
</div>
<h2>Configuration</h2>
<p>To add a timer to your installation, add the following to your <code>configuration.yaml</code> file:</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
timer:
  laundry:
    duration: &#39;00:01:00&#39;</code></pre></figure>
<p>Pick an icon that you can find on <a href="https://materialdesignicons.com/">materialdesignicons.com</a> to use for your timer and prefix the name with <code>mdi:</code>. For example <code>mdi:car</code>, <code>mdi:ambulance</code>, or  <code>mdi:motorbike</code>.</p>
<h2>Events</h2>
<table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>timer.cancelled</code></td>
<td>Fired when a timer has been canceled</td>
</tr>
<tr>
<td><code>timer.finished</code></td>
<td>Fired when a timer has completed</td>
</tr>
<tr>
<td><code>timer.started</code></td>
<td>Fired when a timer has been started</td>
</tr>
<tr>
<td><code>timer.restarted</code></td>
<td>Fired when a timer has been restarted</td>
</tr>
<tr>
<td><code>timer.paused</code></td>
<td>Fired when a timer has been paused</td>
</tr>
</tbody>
</table>
<h2>Services</h2>
<h3>Service <code>timer.start</code></h3>
<p>Starts or restarts a timer with the provided duration. If no duration is given, it will either restart with its initial value, or continue a paused timer with the remaining duration. If a new duration is provided, this will be the new default for the timer until Open Peer Power is restarted (which loads your default values). The duration can be specified as a number of seconds or the easier to read <code>01:23:45</code> format.<br />
You can also use <code>entity_id: all</code> and all active timers will be started.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Name of the entity to take action, e.g., <code>timer.timer0</code>.</td>
</tr>
<tr>
<td><code>duration</code></td>
<td>yes</td>
<td>Duration in seconds or <code>00:00:00</code> until the timer finishes.</td>
</tr>
</tbody>
</table>
<h3>Service <code>timer.pause</code></h3>
<p>Pause a running timer. This will retain the remaining duration for later continuation. You can also use <code>entity_id: all</code> and all active timers will be paused.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Name of the entity to take action, e.g., <code>timer.timer0</code>.</td>
</tr>
</tbody>
</table>
<h3>Service <code>timer.cancel</code></h3>
<p>Cancel an active timer. This resets the duration to the last known initial value without firing the <code>timer.finished</code> event. You can also use <code>entity_id: all</code> and all active timers will be canceled.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Name of the entity to take action, e.g., <code>timer.timer0</code>.</td>
</tr>
</tbody>
</table>
<h3>Service <code>timer.finish</code></h3>
<p>Manually finish a running timer earlier than scheduled. You can also use <code>entity_id: all</code> and all active timers will be finished.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Name of the entity to take action, e.g., <code>timer.timer0</code>.</td>
</tr>
</tbody>
</table>
<h3>Service <code>timer.reload</code></h3>
<p>Reload <code>timer</code>â€™s configuration without restarting Open Peer Power itself. This service takes no service data attributes.</p>
<h3>Use the service</h3>
<p>Select <img src='/images/screenshots/developer-tool-services-icon.png' alt='service developer tool icon' class="no-shadow" height="38" /> <strong>Services</strong> from the <strong>Developer Tools</strong>. Choose <strong>timer</strong> from the list of <strong>Domains</strong>, select the <strong>Service</strong>, enter something like the sample below into the <strong>Service Data</strong> field, and hit <strong>CALL SERVICE</strong>.</p>
<figure class="highlight"><pre><code class="language-json" data-lang="json">{
  &quot;entity_id&quot;: &quot;timer.timer0&quot;
}</code></pre></figure>
<h2>Examples</h2>
<p>Set a timer called <code>test</code> to a duration of 30 seconds.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
timer:
  test:
    duration: &#39;00:00:30&#39;</code></pre></figure>
<h3>Control a timer from the frontend</h3>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example automations.yaml entry
- alias: Timerswitch
  id: &#39;Timerstart&#39;
  # Timer is started when the switch pumprun is set to on.
  trigger:
  - platform: state
    entity_id: switch.pumprun
    to: &#39;on&#39;
  action:
  - service: timer.start
    entity_id: timer.test
<h1>When timer is stopped, the time run out, another message is sent</h1>
<ul>
<li>alias: Timerstop
id: 'Timerstop'
trigger:
<ul>
<li>platform: event
event_type: timer.finished
event_data:
entity_id: timer.test
action:</li>
<li>service: notify.nma
data:
message: &quot;Timer stop&quot;</code></pre></figure></li>
</ul>
</li>
</ul>
<h3>Control a timer manually</h3>
<p>With the <a href="/integrations/script/"><code>script</code></a> integration you would be able to control a timer (see above for a <code>timer</code> configuration sample) manually.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">script:
  start_timer:
    alias: Start timer
    sequence:
      - service: timer.start
        entity_id: timer.test
  pause_timer:
    alias: Pause timer
    sequence:
      - service: timer.pause
        entity_id: timer.test
  cancel_timer:
    alias: Cancel timer
    sequence:
      - service: timer.cancel
        entity_id: timer.test
  finish_timer:
    alias: Finish timer
    sequence:
      - service: timer.finish
        entity_id: timer.test</code></pre></figure>
:ET