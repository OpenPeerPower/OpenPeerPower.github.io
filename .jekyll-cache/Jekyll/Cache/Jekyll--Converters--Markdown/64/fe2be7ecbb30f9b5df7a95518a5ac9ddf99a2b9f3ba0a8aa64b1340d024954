I"J<p>You can create scenes that capture the states you want certain entities to be. For example, a scene can specify that light A should be turned on and light B should be bright red.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
scene:
  - name: Romantic
    icon: &quot;mdi:flower-tulip&quot;
    entities:
      light.tv_back_light: on
      light.ceiling:
        state: on
        xy_color: [0.33, 0.66]
        brightness: 200
  - name: Movies
    entities:
      light.tv_back_light:
        state: on
        brightness: 125
      light.ceiling: off
      media_player.sony_bravia_tv:
        state: on
        source: HDMI 1
        state: on</code></pre></figure>
<p>As you can see, there are two ways to define the states of each <code>entity_id</code>:</p>
<ul>
<li>Define the <code>state</code> directly with the entity. Be aware, that <code>state</code> needs to be defined.</li>
<li>Define a complex state with its attributes. You can see all attributes available for a particular entity under <code>developer-tools -&gt; state</code>.</li>
</ul>
<p>Scenes can be activated using the service <code>scene.turn_on</code> (there is no ‘scene.turn_off’ service).</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example automation
automation:
  trigger:
    platform: state
    entity_id: device_tracker.sweetheart
    from: &quot;not_home&quot;
    to: &quot;home&quot;
  action:
    service: scene.turn_on
    entity_id: scene.romantic</code></pre></figure>
<h2>Applying a scene without defining it</h2>
<p>With the <code>scene.apply</code> service you are able to apply a scene without first defining it via configuration. Instead, you pass the states as part of the service data. The format of the data is the same as the <code>entities</code> field in a configuration.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example automation
automation:
  trigger:
    platform: state
    entity_id: device_tracker.sweetheart
    from: &quot;not_home&quot;
    to: &quot;home&quot;
  action:
    service: scene.apply
    data:
      entities:
        light.tv_back_light:
          state: on
          brightness: 100
        light.ceiling: off
        media_player.sony_bravia_tv:
          state: on
          source: HDMI 1</code></pre></figure>
<h2>Reloading scenes</h2>
<p>Whenever you make a change to your scene configuration, you can call the <code>scene.reload</code> service to reload the scenes.</p>
<h2>Creating scenes on the fly</h2>
<p>Create a new scene without having to configure it by calling the <code>scene.create</code> service. This scene will be discarded after reloading the configuration.</p>
<p>You need to pass a <code>scene_id</code> in lowercase and with underscores instead of spaces. You also may want to specify the entities in the same format as when configuring the scene. You can also take a snapshot of the current state by using the <code>snapshot_entities</code> parameter. In this case, you have to specify the <code>entity_id</code> of all entities you want to take a snapshot of. <code>entities</code> and <code>snapshot_entities</code> can be combined but you have to use at least one of them.</p>
<p>If the scene was previously created by <code>scene.create</code>, it will be overwritten. If the scene was created by YAML, nothing happens but a warning in your log files.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example automation using entities
automation:
  trigger:
    platform: openpeerpower
    event: start
  action:
    service: scene.create
    data:
      scene_id: my_scene
      entities:
        light.tv_back_light:
          state: on
          brightness: 100
        light.ceiling: off
        media_player.sony_bravia_tv:
          state: on
          source: HDMI 1</code></pre></figure>
<p>The following example turns off some entities as soon as a window opens. The states of the entities are restored after the window is closed again.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example automation using snapshot
- alias: Window opened
  trigger:
  - platform: state
    entity_id: binary_sensor.window
    from: &#39;off&#39;
    to: &#39;on&#39;
  condition: []
  action:
  - service: scene.create
    data:
      scene_id: before
      snapshot_entities:
      - climate.ecobee
      - light.ceiling_lights
  - service: light.turn_off
    data:
      entity_id: light.ceiling_lights
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.ecobee
      hvac_mode: &#39;off&#39;
- alias: Window closed
  trigger:
  - platform: state
    entity_id: binary_sensor.window
    from: &#39;on&#39;
    to: &#39;off&#39;
  condition: []
  action:
  - service: scene.turn_on
    data:
      entity_id: scene.before</code></pre></figure>
:ET