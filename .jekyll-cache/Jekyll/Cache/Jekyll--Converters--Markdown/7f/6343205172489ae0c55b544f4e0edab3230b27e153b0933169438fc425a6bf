I"=<h4>Create an input_boolean</h4>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">input_boolean:
  trigger_first_morning:
    name: Waiting for first morning motion
    icon: mdi:kettle</code></pre></figure>
<h4>The Main Automation</h4>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">## These first two control t input_boolean that allows the &quot;first morning action&quot; to occur
## If the action is triggered, it will also disable this boolean. This assumes you have the sun platform enabled.
<p>automation:
#turns it on at 5am</p>
<ul>
<li>alias: Enable First Morning Trigger
trigger:
<ul>
<li>platform: time
at: '05:00:00'
action:
service: openpeerpower.turn_on
entity_id: input_boolean.trigger_first_morning</li>
</ul>
</li>
</ul>
<h1>turns it off an hour after sunrise</h1>
<ul>
<li>alias: Disable First Morning Trigger
trigger:
<ul>
<li>platform: sun
event: sunrise
offset: &quot;01:00:00&quot;
action:
service: openpeerpower.turn_off
entity_id: input_boolean.trigger_first_morning</li>
</ul>
</li>
</ul>
<h1>This is the main automation. It triggers when my motion sensor is triggered</h1>
<h1>(in this case, a motion sensor from a security system attached to my Vera)</h1>
<ul>
<li>
<p>alias: First Morning Motion
trigger:
platform: state
entity_id: binary_sensor.livingroom_motion
to: 'on'</p>
<h1>only complete the automation if we're still waiting for the first motion</h1>
<p>condition:
condition: state
entity_id: input_boolean.trigger_first_morning
state: 'on'</p>
<p>action:</p>
<h1>turn off the &quot;waiting&quot; boolean regardless of whether lights will turn on</h1>
<h1>so that this happens only once</h1>
<ul>
<li>service: openpeerpower.turn_off
entity_id: input_boolean.trigger_first_morning</li>
</ul>
<h1>But only turn on lights if the living room and kitchen lights are off or dimmed</h1>
<h1>If a condition tests false, the automation will end</h1>
<ul>
<li>condition: and
conditions:
<ul>
<li>condition: numeric_state
entity_id: light.livingroom_ec
<h1>if light is off, force a 0, otherwise use the brightness value</h1>
value_template: '{% if is_state('light.livingroom_ec', 'on')  %}{{ state_attr('light.livingroom_ec', 'brightness') }}{% else %}0{% endif %}'
<h1>brightness below 50% (255 = 100%)</h1>
below: 128</li>
<li>condition: numeric_state
entity_id: light.kitchen_bar
value_template: '{% if is_state('light.kitchen_bar', 'on')  %}{{ state_attr('light.kitchen_bar', 'brightness') }}{% else %}0{% endif %}'
below: 128</li>
<li>condition: numeric_state
entity_id: light.kitchen_ceiling
value_template: '{% if is_state('light.kitchen_ceiling', 'on')  %}{{ state_attr('light.kitchen_ceiling', 'brightness') }}{% else %}0{% endif %}'
below: 128</li>
</ul>
</li>
</ul>
<h1>Trigger a scene</h1>
<h1>You could add as many services or scenes as you'd like</h1>
<ul>
<li>service: scene.turn_on
entity_id: scene.morning_first_motion</code></pre></figure></li>
</ul>
</li>
</ul>
<h4>The Scene</h4>
<p>Here is the Scene that is called via the Automations above.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># here&#39;s the scene that gets called. Lights in
# my living room and kitchen turn on.
scene:
  - name: Morning First Motion
    entities:
      light.kitchen_ceiling:
        state: on
        brightness: 127
      light.kitchen_bar:
        state: on
        brightness: 178
      light.kitchen_above_cabinet:
        state: on
        brightness: 178
      light.livingroom_ec:
        state: on
        brightness: 153
      light.livingroom_track:
        state: on
        brightness: 153</code></pre></figure>
:ET