I"?<p>Using NGINX as a proxy for Open Peer Power allows you to serve Open Peer Power securely over standard ports. This configuration file and instructions will walk you through setting up Open Peer Power over a secure connection.</p>
<h3>1. Get a domain name forwarded to your IP</h3>
<p>Chances are, you have a dynamic IP address (your ISP changes your address periodically). If this is true, you can use a Dynamic DNS service to obtain a domain and set it up to update with you IP. If you purchase your own domain name, you will be able to easily get a trusted SSL certificate later.</p>
<h3>2 Install NGINX on your server</h3>
<p>This will vary depending on your OS. Check out Google for this. After installing, ensure that NGINX is not running.</p>
<div class='note'>
You will at least need nginx >= 1.3.13, as WebSocket support is required for the reverse proxy.
</div>
<h3>3. Obtain an SSL certificate</h3>
<p>There are two ways of obtaining an SSL certificate.</p>
<h4>Using Letâ€™s Encrypt</h4>
<p>If you purchased your own domain, you can use <a href="https://letsencrypt.org">https://letsencrypt.org</a> to obtain a free, publicly trusted SSL certificate. This will allow you to work with services like IFTTT. Download and install per the instructions online and get a certificate using the following command.</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">$ sudo ./letsencrypt-auto certonly --standalone -d example.com -d www.example.com</code></pre></figure>
<p>Instead of example.com, use your domain. You will need to renew this certificate every 90 days.</p>
<h4>Using openssl</h4>
<p>If you do not own your own domain, you may generate a self-signed certificate. This will not work with IFTTT, but it will encrypt all of your Open Peer Power traffic.</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 9999
openssl rsa -in key.pem -out key.pem
sudo cp key.pem cert.pem /etc/nginx/ssl
sudo chmod 600 /etc/nginx/ssl/key.pem /etc/nginx/ssl/cert.pem
sudo chown root:root /etc/nginx/ssl/key.pem /etc/nginx/ssl/cert.pem</code></pre></figure>
<h3>4. Create dhparams file</h3>
<p>As a fair warning, this file will take a while to generate.</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">cd /etc/nginx/ssl
sudo openssl dhparam -out dhparams.pem 2048</code></pre></figure>
<h3>5. Install configuration file in NGINX</h3>
<p>Create a new file <code>/etc/nginx/sites-available/hass</code> and copy the configuration file at the bottom of the page into it.</p>
<div class='note'>
<p>Some Linux distributions (including CentOS and Fedora) will not have the <code>/etc/nginx/sites-available/</code> directory. In this case, remove the default server {} block from the <code>/etc/nginx/nginx.conf</code> file and paste the contents from the bottom of the page in its place. If doing this, proceed to step 7.</p>
</div>
<h3>6. Enable the Open Peer Power configuration</h3>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">cd /etc/nginx/sites-enabled
sudo unlink default
sudo ln ../sites-available/hass default</code></pre></figure>
<h3>7. Start NGINX</h3>
<p>Double check this configuration to ensure all settings are correct and start NGINX.</p>
<h3>8. Port forwarding</h3>
<p>Forward ports 443 and 80 to your server on your router. Do not forward port 8123.</p>
<h3>9. Configure Open Peer Power</h3>
<p>Open Peer Power is still available without using the NGINX proxy. Restricting it to only listen to <code>127.0.0.1</code> will forbid direct accesses. Also, Open Peer Power should be told to trust headers coming from the NGINX proxy only. Otherwise, incoming requests will always come from <code>127.0.0.1</code> and not the real IP address.</p>
<p>On your <code>configuration.yaml</code> file, edit the <code>http</code> component.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">http:
  # For extra security set this to only accept connections on localhost if NGINX is on the same machine
  # server_host: 127.0.0.1
  # Update this line to be your domain
  base_url: https://example.com
  use_x_forwarded_for: true
  # You must set the trusted proxy IP address so that Open Peer Power will properly accept connections
  # Set this to your NGINX machine IP, or localhost if hosted on the same machine.
  trusted_proxies: &lt;NGINX IP address here, or 127.0.0.1 if hosted on the same machine&gt;</code></pre></figure>
<h3>NGINX configuration</h3>
<figure class="highlight"><pre><code class="language-nginx" data-lang="nginx">map $http_upgrade $connection_upgrade {
    default upgrade;
    &#39;&#39;      close;
}
<p>server {
# Update this line to be your domain
server_name example.com;</p>
<pre><code># These shouldn&amp;#39;t need to be changed
listen [::]:80 default_server ipv6only=off;
return 301 https://$host$request_uri;
</code></pre>
<p>}</p>
<p>server {
# Update this line to be your domain
server_name example.com;</p>
<pre><code># Ensure these lines point to your SSL certificate and key
ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
# Use these lines instead if you created a self-signed certificate
# ssl_certificate /etc/nginx/ssl/cert.pem;
# ssl_certificate_key /etc/nginx/ssl/key.pem;

# Ensure this line points to your dhparams file
ssl_dhparam /etc/nginx/ssl/dhparams.pem;


# These shouldn&amp;#39;t need to be changed
listen [::]:443 ssl default_server ipv6only=off; # if your nginx version is &amp;gt;= 1.9.5 you can also add the &amp;quot;http2&amp;quot; flag here
add_header Strict-Transport-Security &amp;quot;max-age=31536000; includeSubdomains&amp;quot;;
# ssl on; # Uncomment if you are using nginx &amp;lt; 1.15.0
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers &amp;quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&amp;quot;;
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;

proxy_buffering off;

location / {
    proxy_pass http://127.0.0.1:8123;
    proxy_set_header Host $host;
    proxy_redirect http:// https://;
    proxy_http_version 1.1;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
}
</code></pre>
<p>}</code></pre></figure></p>
:ET