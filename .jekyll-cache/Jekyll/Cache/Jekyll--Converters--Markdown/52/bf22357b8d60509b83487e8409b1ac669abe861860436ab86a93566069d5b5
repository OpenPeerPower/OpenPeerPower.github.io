I"¼<p>This example demonstrates how you can configure Apache to act as a proxy for Open Peer Power.</p>
<p>This is useful if you want to have:</p>
<ul>
<li>a subdomain redirecting to your Open Peer Power instance</li>
<li>several subdomain for several instance</li>
<li>HTTPS redirection</li>
</ul>
<h4>Subdomain</h4>
<p>So you already have a working Apache server available at example.org. Your Open Peer Power is correctly working on this web server and available at <code>http://localhost:8123</code></p>
<p>Enable <a href="https://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html"><code>mod_proxy_wstunnel</code></a> by running if you encounter issues while serving Open Peer Power through your proxy:</p>
<figure class="highlight"><pre><code class="language-bash" data-lang="bash">$ sudo a2enmod proxy_wstunnel</code></pre></figure>
<p>To be able to access to your Open Peer Power instance by using <code>https://home.example.org</code>, add the following file to <code>/etc/httpd/conf/extra/</code> as <code>hass.conf</code></p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">&lt;VirtualHost *:443&gt;
  ServerName home.example.org
  ProxyPreserveHost On
  ProxyRequests off
  ProxyPass /api/websocket ws://localhost:8123/api/websocket
  ProxyPassReverse /api/websocket ws://localhost:8123/api/websocket
  ProxyPass / http://localhost:8123/
  ProxyPassReverse / http://localhost:8123/
<p>RewriteEngine on
RewriteCond %{HTTP:Upgrade} =websocket [NC]
RewriteRule /(.<em>)  ws://localhost:8123/$1 [P,L]
RewriteCond %{HTTP:Upgrade} !=websocket [NC]
RewriteRule /(.</em>)  <a href="http://localhost:8123/$1">http://localhost:8123/$1</a> [P,L]
&lt;/VirtualHost&gt;</code></pre></figure></p>
<p>and make sure that this file is read by Apacheâ€™s main configuration file <code>/etc/httpd/conf/httpd.conf</code></p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">...
Include conf/extra/hass.conf
...</code></pre></figure>
<p>If you donâ€™t want HTTPS, you can change <code>&lt;VirtualHost *:443&gt;</code> to <code>&lt;VirtualHost *:80&gt;</code> or better consider redirecting all HTTP to HTTPS.</p>
<div class='note'>
In case you are getting occasional HTTP 504 error messages ("Gateway Timeout") or HTTP 502 messages ("Bad Gateway") when accessing the Web UI through your proxy, try adding disablereuse=on to both ProxyPass directives:
</div>
<figure class="highlight"><pre><code class="language-text" data-lang="text">&lt;VirtualHost *:443&gt;
  [...]
  ProxyPass /api/websocket ws://localhost:8123/api/websocket disablereuse=on
  [...]
  ProxyPass / http://localhost:8123/ disablereuse=on
  [...]
&lt;/VirtualHost&gt;</code></pre></figure>
<h4>Multiple Instance</h4>
<p>You already have Open Peer Power running on <code>http://localhost:8123</code> and available at home.example.org as describe before. The configuration file for this Open Peer Power is available in <code>/home/alice/.openpeerpower/configuration.yaml</code></p>
<p>You want another instance available at <code>https://countryside.example.org</code></p>
<p>You can either :</p>
<ul>
<li>Create a new user, <code>bob</code>, to hold the configuration file in <code>/home/bob/.openpeerpower/configuration.yaml</code> and run Open Peer Power as this new user</li>
<li>Create another configuration directory in <code>/home/alice/.homeassistan2/configuration.yaml</code> and run Open Peer Power using <code>hass --config /home/alice/.openpeerpower2/</code></li>
</ul>
<p>In both solution, change port number used by modifying <code>configuration.yaml</code></p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">http:
  server_port: 8124
  ...</code></pre></figure>
<p>Start Open Peer Power: Now, you have another instance running on <code>http://localhost:8124</code></p>
<p>To access this instance by using <code>https://countryside.example.org</code> add to <code>/etc/httpd/conf/extra/hass.conf</code></p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">&lt;VirtualHost *:443&gt;
  ProxyPreserveHost On
  ProxyRequests Off
  ServerName countryside.example.org
  ProxyPass /api/websocket ws://localhost:8123/api/websocket
  ProxyPassReverse /api/websocket ws://localhost:8123/api/websocket
  ProxyPass / http://localhost:8124/
  ProxyPassReverse / http://localhost:8124/
&lt;/VirtualHost&gt;</code></pre></figure>
<h4>HTTP to HTTPS redirection</h4>
<p>Add to your <code>/etc/httpd/conf/extra/hass.conf</code></p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">&lt;VirtualHost *:80&gt;
  ServerName example.org
  ServerSignature Off
<p>RewriteEngine on
RewriteCond %{HTTPS} !=on
RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [NE,R,L]
&lt;/VirtualHost&gt;</code></pre></figure></p>
:ET