I"Ì)<p>Conditions can be used within a script or automation to prevent further execution. When a condition does not return true, the script or automation stops executing. A condition will look at the system at that moment. For example, a condition can test if a switch is currently turned on or off.</p>
<p>Unlike a trigger, which is always <code>or</code>, conditions are <code>and</code> by default - all conditions have to be true.</p>
<h3>AND condition</h3>
<p>Test multiple conditions in one condition statement. Passes if all embedded conditions are valid.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: and
  conditions:
    - condition: state
      entity_id: &#39;device_tracker.paulus&#39;
      state: &#39;home&#39;
    - condition: numeric_state
      entity_id: &#39;sensor.temperature&#39;
      below: 20</code></pre></figure>
<p>If you do not want to combine AND and OR conditions, you can list them sequentially.</p>
<p>The following configuration works the same as the one listed above:</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  - condition: state
    entity_id: &#39;device_tracker.paulus&#39;
    state: &#39;home&#39;
  - condition: numeric_state
    entity_id: &#39;sensor.temperature&#39;
    below: 20</code></pre></figure>
<p>Currently you need to format your conditions like this to be able to edit them using the <a href="/docs/automation/editor/">automations editor</a>.</p>
<h3>OR condition</h3>
<p>Test multiple conditions in one condition statement. Passes if any embedded condition is valid.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: or
  conditions:
    - condition: state
      entity_id: &#39;device_tracker.paulus&#39;
      state: &#39;home&#39;
    - condition: numeric_state
      entity_id: &#39;sensor.temperature&#39;
      below: 20</code></pre></figure>
<h3>MIXED AND and OR conditions</h3>
<p>Test multiple AND and OR conditions in one condition statement. Passes if any embedded condition is valid.
This allows you to mix several AND and OR conditions together.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: and
  conditions:
    - condition: state
      entity_id: &#39;device_tracker.paulus&#39;
      state: &#39;home&#39;
    - condition: or
      conditions:
        - condition: state
          entity_id: sensor.weather_precip
          state: &#39;rain&#39;
        - condition: numeric_state
          entity_id: &#39;sensor.temperature&#39;
          below: 20</code></pre></figure>
<h3>Numeric state condition</h3>
<p>This type of condition attempts to parse the state of the specified entity as a number, and triggers if the value matches the thresholds.</p>
<p>If both <code>below</code> and <code>above</code> are specified, both tests have to pass.</p>
<p>You can optionally use a <code>value_template</code> to process the value of the state before testing it.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: numeric_state
  entity_id: sensor.temperature
  above: 17
  below: 25
  # If your sensor value needs to be adjusted
  value_template: &#39;{{ float(state.state) + 2 }}&#39;</code></pre></figure>
<h3>State condition</h3>
<p>Tests if an entity is a specified state.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: state
  entity_id: device_tracker.paulus
  state: &#39;not_home&#39;
  # optional: trigger only if state was this for last X time.
  for:
    hours: 1
    minutes: 10
    seconds: 5</code></pre></figure>
<h3>Sun condition</h3>
<h4>Sun state condition</h4>
<p>The sun state can be used to test if the sun has set or risen.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: state  # &#39;day&#39; condition: from sunrise until sunset
  entity_id: sun.sun
  state: &#39;above_horizon&#39;</code></pre></figure>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: state  # from sunset until sunrise
  entity_id: sun.sun
  state: &#39;below_horizon&#39;</code></pre></figure>
<h4>Sun elevation condition</h4>
<p>The sun elevation can be used to test if the sun has set or risen, it is dusk, it is night, etc. when a trigger occurs.
For an in-depth explanation of sun elevation, see <a href="/docs/automation/trigger/#sun-elevation-trigger">sun elevation trigger</a>.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: and  # &#39;twilight&#39; condition: dusk and dawn, in typical locations
  conditions:
    - condition: template
      value_template: &#39;{{ state_attr(&quot;sun.sun&quot;, &quot;elevation&quot;) &lt; 0 }}&#39;
    - condition: template
      value_template: &#39;{{ state_attr(&quot;sun.sun&quot;, &quot;elevation&quot;) &gt; -6 }}&#39;</code></pre></figure>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: template  # &#39;night&#39; condition: from dusk to dawn, in typical locations
  value_template: &#39;{{ state_attr(&quot;sun.sun&quot;, &quot;elevation&quot;) &lt; -6 }}&#39;</code></pre></figure>
<h4>Sunset/sunrise condition</h4>
<p>The sun condition can also test if the sun has already set or risen when a trigger occurs. The <code>before</code> and <code>after</code> keys can only be set to <code>sunset</code> or <code>sunrise</code>. They have a corresponding optional offset value (<code>before_offset</code>, <code>after_offset</code>) that can be added, similar to the <a href="/docs/automation/trigger/#sun-trigger">sun trigger</a>. When both keys are used, the result is a logical <code>and</code> of separate conditions.</p>
<p>Note that if only <code>before</code> key is used, the condition will be <code>true</code> <em>from midnight</em> until sunrise/sunset. If only <code>after</code> key is used, the condition will be <code>true</code> from sunset/sunrise <em>until midnight</em>. Therefore, to cover time between sunset and sunrise one need to use <code>after: sunset</code> and <code>before: sunrise</code> as 2 separate conditions and combine them using <code>or</code>.</p>
<div class='note warning'>
The sunset/sunrise conditions do not work in locations inside the polar circles, and also not in locations with a highly skewed local time zone.
<p>In those cases it is advised to use conditions evaluating the solar elevation instead of the before/after sunset/sunrise conditions.</p>
</div>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: sun
  after: sunset
  after_offset: &quot;-01:00:00&quot;</code></pre></figure>
<p>This is â€˜when lightâ€™ - equivalent to a state condition on <code>sun.sun</code> of <code>above_horizon</code>.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  - condition: sun
      after: sunrise
      before: sunset</code></pre></figure>
<p>This is â€˜when darkâ€™ - equivalent to a state condition on <code>sun.sun</code> of <code>below_horizon</code>.</p>
<p>We cannot use both keys in this case as it will always be <code>false</code>.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: or
  conditions:
    - condition: sun
      after: sunset
    - condition: sun
      before: sunrise</code></pre></figure>
<p>A visual timeline is provided below showing an example of when these conditions are true. In this chart, sunrise is at 6:00, and sunset is at 18:00 (6:00 PM). The green areas of the chart indicate when the specified conditions are true.</p>
<img src='/images/docs/scripts/sun-conditions.svg' alt='Graphic showing an example of sun conditions' />
<h3>Template condition</h3>
<p>The template condition tests if the <a href="/topics/templating/">given template</a> renders a value equal to true. This is achieved by having the template result in a true boolean expression or by having the template render â€˜trueâ€™.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: template
  value_template: &quot;{{ (state_attr(&#39;device_tracker.iphone&#39;, &#39;battery_level&#39;)|int) &gt; 50 }}&quot;</code></pre></figure>
<p>Within an automation, template conditions also have access to the <code>trigger</code> variable as <a href="/getting-started/automation-templating/">described here</a>.</p>
<h3>Time condition</h3>
<p>The time condition can test if it is after a specified time, before a specified time or if it is a certain day of the week.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: time
  # At least one of the following is required.
  after: &#39;15:00:00&#39;
  before: &#39;02:00:00&#39;
  weekday:
    - mon
    - wed
    - fri</code></pre></figure>
<p>Valid values for <code>weekday</code> are <code>mon</code>, <code>tue</code>, <code>wed</code>, <code>thu</code>, <code>fri</code>, <code>sat</code>, <code>sun</code>.
Note that if only <code>before</code> key is used, the condition will be <code>true</code> <em>from midnight</em> until the specified time.
If only <code>after</code> key is used, the condition will be <code>true</code> from the specified time <em>until midnight</em>.
Time condition windows can span across the midnight threshold if <strong>both</strong> <code>after</code> and <code>before</code> keys are used. In the example above, the condition window is from 3pm to 2am.</p>
<div class='note tip'>
<p>A better weekday condition could be by using the <a href="/integrations/workday/">Workday Binary Sensor</a>.</p>
</div>
<h3>Zone condition</h3>
<p>Zone conditions test if an entity is in a certain zone. For zone automation to work, you need to have set up a device tracker platform that supports reporting GPS coordinates.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  condition: zone
  entity_id: device_tracker.paulus
  zone: zone.home</code></pre></figure>
<h3>Examples</h3>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">condition:
  - condition: numeric_state
    entity_id: sun.sun
    value_template: &#39;&#39;
    below: 1
  - condition: state
    entity_id: light.living_room
    state: &#39;off&#39;
  - condition: time
    before: &#39;23:00:00&#39;
    after: &#39;14:00:00&#39;
  - condition: state
    entity_id: script.light_turned_off_5min
    state: &#39;off&#39;</code></pre></figure>
:ET