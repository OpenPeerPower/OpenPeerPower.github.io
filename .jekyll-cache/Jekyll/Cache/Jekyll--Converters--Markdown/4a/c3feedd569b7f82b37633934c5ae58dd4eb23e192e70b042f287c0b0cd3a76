I"ç<p>The <code>input_select</code> integration allows the user to define a list of values that can be selected via the frontend and can be used within conditions of automation. When a user selects a new item, a state transition event is generated. This state event can be used in an <code>automation</code> trigger.</p>
<p>To enable this platform in your installation, add the following lines to your <code>configuration.yaml</code>:</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
input_select:
  who_cooks:
    name: Who cooks today
    options:
      - Paulus
      - Anne Therese
    initial: Anne Therese
    icon: mdi:panda
  living_room_preset:
    options:
      - Visitors
      - Visitors with kids
      - Home Alone</code></pre></figure>
<div class='note'>
<p>Because YAML defines <a href="https://yaml.org/type/bool.html">booleans</a> as equivalent, any variations of ‚ÄòOn‚Äô, ‚ÄòYes‚Äô, ‚ÄòY‚Äô, ‚ÄòOff‚Äô, ‚ÄòNo‚Äô, or ‚ÄòN‚Äô  (regardless of case) used as option names will be replaced by True and False unless they are defined in quotation marks.</p>
</div>
<h3>Restore State</h3>
<p>If you set a valid value for <code>initial</code> this integration will start with state set to that value. Otherwise, it will restore the state it had prior to Open Peer Power stopping.</p>
<h3>Services</h3>
<p>This integration provides three services to modify the state of the <code>input_select</code>.</p>
<table>
<thead>
<tr>
<th>Service</th>
<th>Data</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>select_option</code></td>
<td><code>option</code></td>
<td>This can be used to select a specific option.</td>
</tr>
<tr>
<td><code>set_options</code></td>
<td><code>options</code><br><code>entity_id(s)</code></td>
<td>Set the options for specific <code>input_select</code> entities.</td>
</tr>
<tr>
<td><code>select_previous</code></td>
<td></td>
<td>Select the previous option.</td>
</tr>
<tr>
<td><code>select_next</code></td>
<td></td>
<td>Select the next option.</td>
</tr>
<tr>
<td><code>reload</code></td>
<td></td>
<td>Reload <code>input_select</code> configuration</td>
</tr>
</tbody>
</table>
<h3>Scenes</h3>
<p>Specifying a target option in a <a href="/integrations/scene/">Scene</a> is simple:</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
scene:
  - name: Example1
    entities:
      input_select.who_cooks: Paulus</code></pre></figure>
<p>The list of options can also be set in a <a href="/integrations/scene">Scene</a>. In that case, you also need to specify what the new state will be.</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
scene:
  - name: Example2
    entities:
      input_select.who_cooks:
        options:
          - Alice
          - Bob
          - Paulus
        state: Bob</code></pre></figure>
<h2>Automation Examples</h2>
<p>The following example shows the usage of the <code>input_select.select_option</code> service in an automation:</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
automation:
  - alias: example automation
    trigger:
      platform: event
      event_type: MY_CUSTOM_EVENT
    action:
      - service: input_select.select_option
        data:
          entity_id: input_select.who_cooks
          option: Paulus</code></pre></figure>
<p>To dynamically set the <code>input_select</code> options you can call <code>input_select.set_options</code>. The following example can be used in an automation rule:</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"># Example configuration.yaml entry
automation:
  - alias: example automation
    trigger:
      platform: event
      event_type: MY_CUSTOM_EVENT
    action:
      - service: input_select.set_options
        data:
          entity_id: input_select.who_cooks
          options: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</code></pre></figure>
<p>Example of <code>input_select</code> being used in a bidirectional manner, both being set by and controlled by an MQTT action in an automation.</p>
<p>{% highlight yaml %}</p>
<h1>Example configuration.yaml entry using ‚Äòinput_select‚Äô in an action in an automation</h1>
<h1>Define input_select</h1>
<p>input_select:
thermostat_mode:
name: Thermostat Mode
options:
- ‚Äúauto‚Äù
- ‚Äúoff‚Äù
- ‚Äúcool‚Äù
- ‚Äúheat‚Äù
icon: mdi:target</p>
<h1>Automation.</h1>
<h1>This automation script runs when a value is received via MQTT on retained topic: thermostatMode</h1>
<h1>It sets the value selector on the GUI. This selector also had its own automation when the value is changed.</h1>
<ul>
<li>alias: Set Thermostat Mode Selector
trigger:
platform: mqtt
topic: ‚ÄúthermostatMode‚Äù
<h1>entity_id: input_select.thermostat_mode</h1>
action:
service: input_select.select_option
data_template:
entity_id: input_select.thermostat_mode
option: ‚Äú{{ trigger.payload }}‚Äù</li>
</ul>
<h1>This automation script runs when the thermostat mode selector is changed.</h1>
<h1>It publishes its value to the same MQTT topic it is also subscribed to.</h1>
<ul>
<li>alias: Set Thermostat Mode
trigger:
platform: state
entity_id: input_select.thermostat_mode
action:
service: mqtt.publish
data_template:
topic: ‚ÄúthermostatMode‚Äù
retain: true
payload: ‚Äú{{ states(‚Äòinput_select.thermostat_mode‚Äô) }}‚Äù
{% endhighlight %}</li>
</ul>
:ET